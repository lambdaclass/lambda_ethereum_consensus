/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 4 "main.go"

#include <string.h>
#include "utils.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void DeleteHandle(uintptr_t h);
extern uintptr_t ListenAddrStrings(GoString listenAddr);
extern uintptr_t HostNew(GoSlice options);
extern void HostClose(uintptr_t recv);
extern void HostSetStreamHandler(uintptr_t recv, GoString protoId, GoSlice procId, send_message1_t callback);
extern uintptr_t HostNewStream(uintptr_t recv, uintptr_t pid, GoString protoId);
extern void HostConnect(uintptr_t recv, uintptr_t pid, GoSlice procId, send_message1_t callback);
extern uintptr_t HostPeerstore(uintptr_t recv);
extern uintptr_t HostID(uintptr_t recv);
extern uintptr_t HostAddrs(uintptr_t recv);
extern void PeerstoreAddAddrs(uintptr_t recv, uintptr_t id, uintptr_t addrs, GoUint64 ttl);
extern GoInt StreamRead(uintptr_t recv, GoSlice buffer);
extern GoInt StreamWrite(uintptr_t recv, GoSlice data);
extern void StreamClose(uintptr_t recv);
extern void StreamCloseWrite(uintptr_t recv);
extern GoInt StreamProtocol(uintptr_t recv, GoSlice buffer);
extern GoInt StreamProtocolLen(uintptr_t recv);
extern uintptr_t ListenV5(GoString strAddr, GoSlice strBootnodes);
extern uintptr_t ListenerRandomNodes(uintptr_t recv);
extern GoUint8 IteratorNext(uintptr_t recv);
extern uintptr_t IteratorNode(uintptr_t recv);
extern GoInt NodeTCP(uintptr_t recv);
extern uintptr_t NodeMultiaddr(uintptr_t recv);
extern uintptr_t NodeID(uintptr_t recv);
extern uintptr_t NewGossipSub(uintptr_t h);
extern uintptr_t PubSubJoin(uintptr_t recv, GoString topicStr);
extern uintptr_t TopicSubscribe(uintptr_t recv, GoSlice procId, send_message1_t callback);
extern GoInt TopicPublish(uintptr_t recv, GoSlice data);
extern void SubscriptionCancel(uintptr_t recv);
extern GoInt MessageData(uintptr_t recv, GoSlice buffer);
extern GoInt MessageDataLen(uintptr_t recv);

#ifdef __cplusplus
}
#endif

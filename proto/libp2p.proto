syntax = "proto3";
option go_package = "./internal/proto;libp2p";

package libp2p_proto;

// Initial options passed to the libp2p node.
// Documented in `lib/libp2p_port.ex`
message InitArgs {
    repeated string listen_addr = 1;
    bool enable_discovery = 2;
    string discovery_addr = 3;
    repeated string bootnodes = 4;
    Enr initial_enr = 5;
}

message SetHandler {
    // Protocol ID to set the handler for.
    string protocol_id = 1;
}

message JoinTopic {
    // Name of the topic to join.
    string name = 1;
}

message SubscribeToTopic {
    // Name of the topic to subscribe to.
    string name = 1;
}

message LeaveTopic {
    // Name of the topic to leave.
    string name = 1;
}

message AddPeerGossip {}
message RemovePeerGossip {}

message Join {
    // topic that was joined
    string topic = 1;
}

message Leave {
    // topic that was abandoned
    string topic = 1;
}

message Graft {
    string topic = 1;
}

message Prune {
    string topic = 1;
}

message ValidateMessageGossip {
    string topic = 1;
}

message DeliverMessage {
    string topic = 1;
}

message UnDeliverableMessage {
    string topic = 1;
}

message RejectMessage {
    string topic = 1;
}

message DuplicateMessage {
    string topic = 1;
}

message AddPeer {
    bytes id = 1;
    repeated string addrs = 2;
    int64 ttl = 3;
}

message SendRequest {
    bytes id = 1;
    string protocol_id = 2;
    bytes message = 3;
}

message SendResponse {
    string request_id = 1;
    bytes message = 2;
}

message Enr {
    bytes eth2 = 1;
    bytes attnets = 2;
    bytes syncnets = 3;
}

message GetNodeIdentity {}

message Publish {
    string topic = 1;
    bytes message = 2;
}

enum ValidationResult {
    accept = 0;
    reject = 1;
    ignore = 2;
}

message ValidateMessage {
    bytes msg_id = 1;
    ValidationResult result = 2;
}

message Command {
    bytes from = 1;
    oneof c {
        SetHandler set_handler = 2;
        SubscribeToTopic subscribe = 3;
        LeaveTopic leave = 4;
        AddPeer add_peer = 5;
        SendRequest send_request = 6;
        SendResponse send_response = 7;
        GetNodeIdentity get_node_identity = 8;
        Publish publish = 9;
        ValidateMessage validate_message = 10;
        Enr update_enr = 11;
        JoinTopic join = 12;
    }
}

message GossipSub {
    // Name of the topic from which the notification arrived.
    // We use bytes to skip UTF8 validation
    bytes topic = 1;
    // PID of the subscribed process.
    bytes handler = 2;
    // Message's unique ID.
    bytes msg_id = 3;
    // Compressed and ssz encoded message.
    bytes message = 4;
}

// A request from a peer.
message Request {
    // We use bytes to skip UTF8 validation
    bytes protocol_id = 1;
    bytes handler = 2;
    // We use bytes to skip UTF8 validation
    bytes request_id = 3;
    bytes message = 4;
}

// A new peer was added.
message NewPeer {
    bytes peer_id = 1;
}

message ResultMessage {
    repeated bytes message = 3;
}

message NodeIdentity {
    bytes peer_id = 1;
    bytes enr = 2;
    repeated bytes p2p_addresses = 3;
    repeated bytes discovery_addresses = 4;
    bytes pretty_peer_id = 5;
}

// A result from a command.
message Result {
    bytes from = 1;
    oneof result {
        ResultMessage ok = 2;
        ResultMessage error = 3;
        NodeIdentity node_identity = 4;
    }
}

message Tracer {
    oneof t {
        Join joined = 1;
        Leave left = 2;
        Graft grafted = 3;
        Prune pruned = 4;
        ValidateMessageGossip validate_message = 5;
        DeliverMessage deliver_message = 6;
        UnDeliverableMessage un_deliverable_message = 7;
        RejectMessage reject_message = 8;
        DuplicateMessage duplicate_message = 9;
        AddPeerGossip add_peer = 10;
        RemovePeerGossip remove_peer = 11;
    }
}

message Notification {
    oneof n {
        GossipSub gossip = 1;
        Request request = 2;
        NewPeer new_peer = 3;
        Result result = 4;
        Tracer tracer = 5;
    }
}

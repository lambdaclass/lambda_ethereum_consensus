
mix test --no-start --only implemented_spectest
Compiling 4 files (.ex)
Excluding tags: [:test]
Including tags: [:implemented_spectest]

file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_target_included_after_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_target_included_after_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<142, 11, 26, 28, 39, 27, 236, 17, 148, 103, 49, 216, 28, 149, 30,
    174, 45, 214, 127, 37, 155, 26, 78, 82, 65, 199, 41, 5, 162, 113, 186, 178,
    199, 71, 128, 109, 177, 238, 143, 107, 231, 178, 6, 202, 76, 188, 127, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_target_included_after_epoch_delay/post.ssz_snappy
✅ post
...............file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_same_data/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_same_data/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      151, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_same_data/post.ssz_snappy
✅ post
......................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_extra_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_extra_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33, 34],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_extra_index/post.ssz_snappy
✅ post
..............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_no_double_or_surround/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_no_double_or_surround/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 1
      }
    },
    signature: <<132, 36, 227, 143, 138, 157, 78, 95, 27, 191, 67, 250, 143, 91,
      169, 204, 142, 16, 131, 23, 72, 210, 170, 233, 138, 155, 96, 34, 161, 105,
      41, 101, 114, 55, 247, 51, 131, 255, 201, 124, 97, 156, 36, 217, 40, 45,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_no_double_or_surround/post.ssz_snappy
✅ post
..................................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_double/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_double/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_double/post.ssz_snappy
post before deserializing BeaconState
✅ post
..........file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_multiple_blocks_single_slot/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_multiple_blocks_single_slot/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 1,
  proposer_index: 63,
  parent_root: <<145, 118, 69, 26, 229, 140, 187, 195, 50, 241, 30, 195, 129,
    64, 33, 245, 202, 175, 192, 206, 197, 9, 216, 240, 39, 65, 191, 222, 220,
    61, 70, 6>>,
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_multiple_blocks_single_slot/post.ssz_snappy
✅ post
................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_2/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_2/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 30, 15, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_2/post.ssz_snappy
✅ post
............................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_many_aggregation_bits/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_many_aggregation_bits/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: "/",
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_many_aggregation_bits/post.ssz_snappy
✅ post
...........................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_bad_source_root/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_bad_source_root/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<147, 151, 80, 16, 192, 242, 159, 48, 40, 118, 33, 177, 36, 127,
    41, 138, 162, 31, 151, 236, 145, 72, 20, 64, 197, 214, 25, 28, 162, 248, 55,
    134, 117, 74, 79, 185, 142, 89, 141, 159, 43, 214, 101, 192, 97, 161, 113,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_bad_source_root/post.ssz_snappy
✅ post
........................................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_index/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 4,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_index/post.ssz_snappy
✅ post
..................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_sqrt_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_sqrt_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<142, 11, 26, 28, 39, 27, 236, 17, 148, 103, 49, 216, 28, 149, 30,
    174, 45, 214, 127, 37, 155, 26, 78, 82, 65, 199, 41, 5, 162, 113, 186, 178,
    199, 71, 128, 109, 177, 238, 143, 107, 231, 178, 6, 202, 76, 188, 127, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_sqrt_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
......................................................................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_2/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_2/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_2/post.ssz_snappy
✅ post
.....................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/one_basic_attestation/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/one_basic_attestation/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/one_basic_attestation/post.ssz_snappy
post before deserializing BeaconState
✅ post
...............................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_normal_signed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_normal_signed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 15, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<152, 150, 125, 98, 235, 248, 248, 43, 12, 66, 253, 202, 160,
      63, 14, 41, 84, 189, 205, 225, 29, 204, 3, 228, 105, 92, 138, 163, 199,
      177, 20, 144, 101, 109, 0, 231, 119, 110, 247, 18, 226, 151, 44, 80, 33,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_normal_signed/post.ssz_snappy
✅ post
...............................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_empty_indices/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_empty_indices/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_empty_indices/post.ssz_snappy
✅ post
.file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_slashed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_slashed/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 1,
  proposer_index: 63,
  parent_root: <<7, 123, 221, 12, 12, 92, 109, 173, 42, 17, 183, 210, 159, 77,
    93, 159, 58, 241, 225, 187, 17, 131, 160, 225, 114, 156, 213, 156, 231, 8,
    163, 161>>,
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_slashed/post.ssz_snappy
✅ post
.....................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_0/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_0/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 3,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_0/post.ssz_snappy
✅ post
...........................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_committee_signature/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_committee_signature/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 1,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_committee_signature/post.ssz_snappy
✅ post
.file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/attestation_from_future/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/attestation_from_future/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 4, 13, 20],
    data: %SszTypes.AttestationData{
      slot: 5,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<139, 23, 36, 4, 81, 117, 50, 253, 131, 112, 175, 31, 112, 236,
      153, 87, 149, 168, 55, 138, 31, 51, 53, 187, 90, 6, 195, 124, 137, 106,
      233, 129, 147, 255, 224, 159, 6, 210, 86, 120, 12, 226, 199, 201, 14, 233,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 4, 13, 20],
    data: %SszTypes.AttestationData{
      slot: 5,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<170, 27, 167, 176, 215, 180, 243, 170, 35, 167, 24, 227, 55,
      20, 65, 209, 218, 188, 41, 241, 80, 95, 107, 144, 103, 27, 72, 49, 79, 21,
      26, 62, 115, 73, 104, 234, 98, 168, 158, 24, 28, 220, 138, 162, 200, ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/attestation_from_future/post.ssz_snappy
post before deserializing BeaconState
✅ post
..........................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_replaced_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_replaced_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 34],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_replaced_index/post.ssz_snappy
✅ post
........................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_target_epoch/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_target_epoch/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_target_epoch/post.ssz_snappy
✅ post
............file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_and_target_included_after_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_and_target_included_after_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<131, 219, 207, 56, 2, 14, 226, 218, 219, 212, 38, 35, 173, 136,
    237, 54, 244, 172, 212, 20, 175, 172, 12, 99, 148, 138, 3, 105, 21, 83, 99,
    185, 81, 187, 162, 114, 165, 216, 124, 203, 181, 186, 112, 0, 74, 196, 79,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_and_target_included_after_epoch_delay/post.ssz_snappy
✅ post
............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_double_signed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_double_signed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 30, 33, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<181, 21, 36, 12, 250, 180, 54, 78, 98, 37, 172, 85, 10, 79,
      226, 57, 23, 135, 168, 44, 216, 25, 200, 184, 23, 104, 102, 109, 146, 137,
      157, 59, 12, 133, 13, 170, 72, 53, 203, 113, 228, 138, 137, 69, 145, 223,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_double_signed/post.ssz_snappy
✅ post
...................file path: tests/minimal/capella/operations/attestation/pyspec_tests/multi_proposer_index_iterations/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/multi_proposer_index_iterations/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 16,
    index: 0,
    beacon_block_root: <<103, 140, 136, 63, 31, 213, 193, 145, 186, 2, 77, 149,
      167, 65, 252, 108, 160, 239, 177, 143, 8, 197, 218, 168, 146, 99, 153,
      161, 156, 203, 11, 53>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<103, 140, 136, 63, 31, 213, 193, 145, 186, 2, 77, 149, 167, 65,
        252, 108, 160, 239, 177, 143, 8, 197, 218, 168, 146, 99, 153, 161, 156,
        203, 11, 53>>,
      epoch: 2
    }
  },
  signature: <<178, 158, 218, 115, 147, 41, 86, 50, 144, 101, 15, 203, 49, 42,
    29, 39, 126, 218, 58, 205, 74, 53, 249, 85, 203, 190, 253, 15, 95, 71, 38,
    234, 103, 157, 49, 22, 84, 119, 71, 75, 95, 136, 251, 9, 233, 95, 245, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/multi_proposer_index_iterations/post.ssz_snappy
post before deserializing BeaconState
✅ post
...................file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_sqrt_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_sqrt_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_sqrt_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
..........file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_min_inclusion_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_min_inclusion_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_min_inclusion_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
...............................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<142, 11, 26, 28, 39, 27, 236, 17, 148, 103, 49, 216, 28, 149, 30,
    174, 45, 214, 127, 37, 155, 26, 78, 82, 65, 199, 41, 5, 162, 113, 186, 178,
    199, 71, 128, 109, 177, 238, 143, 107, 231, 178, 6, 202, 76, 188, 127, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.........file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_min_inclusion_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_min_inclusion_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<131, 219, 207, 56, 2, 14, 226, 218, 219, 212, 38, 35, 173, 136,
    237, 54, 244, 172, 212, 20, 175, 172, 12, 99, 148, 138, 3, 105, 21, 83, 99,
    185, 81, 187, 162, 114, 165, 216, 124, 203, 181, 186, 112, 0, 74, 196, 79,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_min_inclusion_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
...........file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_new_source_epoch/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_new_source_epoch/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 1
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<178, 49, 180, 9, 7, 31, 36, 82, 82, 172, 161, 91, 142, 14, 179,
    208, 93, 34, 206, 108, 101, 45, 168, 198, 194, 218, 131, 248, 104, 133, 233,
    99, 210, 217, 10, 128, 72, 205, 242, 186, 48, 22, 186, 156, 203, 58, 73,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_new_source_epoch/post.ssz_snappy
✅ post
...............................file path: tests/minimal/capella/operations/attestation/pyspec_tests/previous_epoch/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/previous_epoch/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/previous_epoch/post.ssz_snappy
post before deserializing BeaconState
✅ post
.................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_normal_signed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_normal_signed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 6, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<138, 78, 14, 215, 163, 229, 206, 49, 239, 60, 183, 243, 70, 70,
      60, 196, 153, 233, 62, 147, 3, 45, 198, 207, 186, 69, 80, 105, 48, 19,
      221, 251, 97, 100, 53, 14, 76, 50, 219, 242, 5, 118, 87, 248, 223, 202,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_duplicate_index_normal_signed/post.ssz_snappy
✅ post
............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1_and_2/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1_and_2/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1_and_2/post.ssz_snappy
✅ post
.....................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_few_aggregation_bits/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_few_aggregation_bits/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: "\t",
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<130, 34, 171, 174, 4, 92, 193, 162, 185, 174, 248, 241, 133, 251,
    2, 119, 244, 8, 6, 119, 12, 230, 148, 108, 106, 133, 16, 16, 233, 66, 138,
    90, 148, 253, 10, 153, 55, 234, 119, 46, 194, 111, 241, 199, 248, 252, 184,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_too_few_aggregation_bits/post.ssz_snappy
✅ post
......................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_after_epoch_slots/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_after_epoch_slots/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_after_epoch_slots/post.ssz_snappy
✅ post
..file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_sqrt_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_sqrt_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<138, 178, 99, 20, 20, 253, 49, 193, 153, 93, 21, 184, 62, 86, 17,
    82, 139, 128, 247, 162, 115, 228, 228, 96, 2, 117, 56, 57, 91, 173, 149, 86,
    191, 183, 31, 218, 120, 126, 0, 145, 216, 144, 134, 99, 197, 166, 75, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_sqrt_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_double_signed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_double_signed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 30, 33, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<177, 227, 140, 249, 136, 123, 2, 28, 185, 110, 38, 20, 88, 160,
      150, 142, 63, 170, 79, 210, 215, 249, 34, 217, 109, 52, 47, 80, 130, 223,
      79, 18, 55, 159, 96, 70, 16, 91, 100, 68, 49, 160, 11, 89, 44, ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_duplicate_index_double_signed/post.ssz_snappy
✅ post
..file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_extra_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_extra_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33, 34],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_bad_extra_index/post.ssz_snappy
✅ post
.....................................................................................................................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_before_inclusion_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_before_inclusion_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_before_inclusion_delay/post.ssz_snappy
✅ post
.....................................................................................................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_sqrt_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_sqrt_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<131, 219, 207, 56, 2, 14, 226, 218, 219, 212, 38, 35, 173, 136,
    237, 54, 244, 172, 212, 20, 175, 172, 12, 99, 148, 138, 3, 105, 21, 83, 99,
    185, 81, 187, 162, 114, 165, 216, 124, 203, 181, 186, 112, 0, 74, 196, 79,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_sqrt_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_min_inclusion_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_min_inclusion_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<142, 11, 26, 28, 39, 27, 236, 17, 148, 103, 49, 216, 28, 149, 30,
    174, 45, 214, 127, 37, 155, 26, 78, 82, 65, 199, 41, 5, 162, 113, 186, 178,
    199, 71, 128, 109, 177, 238, 143, 107, 231, 178, 6, 202, 76, 188, 127, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_target_included_at_min_inclusion_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_current_source_root/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_current_source_root/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 40,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
      epoch: 4
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 5
    }
  },
  signature: <<180, 224, 24, 151, 77, 129, 26, 6, 170, 16, 95, 245, 30, 114,
    112, 187, 214, 172, 29, 42, 114, 81, 55, 62, 200, 147, 236, 40, 188, 91,
    195, 65, 244, 98, 75, 36, 85, 172, 126, 234, 179, 163, 2, 160, 133, 70, 101,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_current_source_root/post.ssz_snappy
✅ post
........................................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_recent/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_recent/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_recent/post.ssz_snappy
post before deserializing BeaconState
✅ post
......................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/misc_balances/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/misc_balances/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 10, 22, 35, 43, 63],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<90, 10, 52, 213, 210, 90, 66, 195, 45, 61, 191, 43,
        217, 201, 78, 245, 154, 239, 161, 183, 112, 215, 102, 192, 254, 26, 242,
        187, 190, 130, 108, 221>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<90, 10, 52, 213, 210, 90, 66, 195, 45, 61, 191, 43, 217, 201,
          78, 245, 154, 239, 161, 183, 112, 215, 102, 192, 254, 26, 242, 187,
          190, 130, 108, 221>>,
        epoch: 0
      }
    },
    signature: <<169, 142, 73, 202, 172, 134, 192, 114, 194, 44, 59, 196, 27,
      243, 163, 70, 107, 216, 94, 198, 52, 104, 125, 128, 174, 122, 86, 24, 106,
      36, 59, 225, 32, 200, 245, 173, 34, 224, 235, 118, 146, 250, 95, 60, 61,
      102, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 10, 22, 35, 43, 63],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<90, 10, 52, 213, 210, 90, 66, 195, 45, 61, 191, 43,
        217, 201, 78, 245, 154, 239, 161, 183, 112, 215, 102, 192, 254, 26, 242,
        187, 190, 130, 108, 221>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<161, 245, 29, 139, 171, 235, 102, 142, 66, 207, 217, 82, 175,
      4, 87, 67, 244, 186, 194, 20, 44, 183, 168, 164, 176, 35, 6, 60, 59, 141,
      102, 151, 247, 192, 211, 120, 182, 135, 154, 206, 172, 35, 48, 184, 247,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/misc_balances/post.ssz_snappy
post before deserializing BeaconState
✅ post
.............................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_long_ago/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_long_ago/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/already_exited_long_ago/post.ssz_snappy
post before deserializing BeaconState
✅ post
.....................................................................................................................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/with_effective_balance_disparity/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/with_effective_balance_disparity/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 10, 22, 35, 43, 63],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<196, 71, 228, 129, 29, 22, 140, 117, 151, 98, 159,
        238, 212, 206, 248, 163, 220, 113, 225, 22, 62, 60, 17, 167, 33, 14,
        152, 86, 121, 143, 59, 65>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<196, 71, 228, 129, 29, 22, 140, 117, 151, 98, 159, 238, 212,
          206, 248, 163, 220, 113, 225, 22, 62, 60, 17, 167, 33, 14, 152, 86,
          121, 143, 59, 65>>,
        epoch: 0
      }
    },
    signature: <<145, 236, 96, 173, 163, 144, 4, 108, 161, 239, 229, 162, 55,
      184, 48, 58, 39, 172, 171, 126, 141, 11, 221, 17, 165, 202, 121, 48, 219,
      211, 39, 151, 173, 29, 117, 32, 103, 233, 123, 192, 20, 133, 32, 119, 108,
      139, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [0, 10, 22, 35, 43, 63],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<196, 71, 228, 129, 29, 22, 140, 117, 151, 98, 159,
        238, 212, 206, 248, 163, 220, 113, 225, 22, 62, 60, 17, 167, 33, 14,
        152, 86, 121, 143, 59, 65>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<172, 61, 123, 150, 72, 252, 95, 167, 86, 117, 137, 142, 181, 7,
      79, 87, 132, 236, 213, 85, 115, 174, 179, 71, 21, 13, 196, 229, 67, 66,
      175, 171, 134, 249, 83, 232, 48, 136, 74, 7, 126, 244, 35, 168, 230, ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/with_effective_balance_disparity/post.ssz_snappy
post before deserializing BeaconState
✅ post
....................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_zeroes_sig/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_zeroes_sig/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<16>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_zeroes_sig/post.ssz_snappy
✅ post
.................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_source_root_is_target_root/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_source_root_is_target_root/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<176, 22, 80, 68, 151, 119, 8, 243, 104, 94, 33, 24, 245, 15, 182,
    74, 77, 27, 239, 46, 87, 170, 15, 163, 203, 254, 73, 42, 216, 5, 27, 155,
    97, 123, 162, 141, 32, 60, 22, 88, 110, 148, 184, 250, 117, 59, 202, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_source_root_is_target_root/post.ssz_snappy
✅ post
..........file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_1/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_1/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 2,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_wrong_index_for_slot_1/post.ssz_snappy
✅ post
....file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_future_target_epoch/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_future_target_epoch/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 1
    }
  },
  signature: <<132, 36, 227, 143, 138, 157, 78, 95, 27, 191, 67, 250, 143, 91,
    169, 204, 142, 16, 131, 23, 72, 210, 170, 233, 138, 155, 96, 34, 161, 105,
    41, 101, 114, 55, 247, 51, 131, 255, 201, 124, 97, 156, 36, 217, 40, 45,
    105, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_future_target_epoch/post.ssz_snappy
✅ post
..........file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_index/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 1,
  proposer_index: 0,
  parent_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
    27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236, 18,
    174>>,
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_proposer_index/post.ssz_snappy
✅ post
................................................................................................................................file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_slot_block_header/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_slot_block_header/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 2,
  proposer_index: 63,
  parent_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
    27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236, 18,
    174>>,
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_slot_block_header/post.ssz_snappy
✅ post
...........................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/proposer_index_slashed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/proposer_index_slashed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: ~c"\t",
    data: %SszTypes.AttestationData{
      slot: 8,
      index: 0,
      beacon_block_root: <<148, 161, 114, 87, 42, 255, 170, 176, 101, 241, 117,
        237, 186, 174, 48, 251, 127, 80, 205, 244, 198, 59, 115, 79, 155, 117,
        105, 243, 81, 52, 198, 93>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<148, 161, 114, 87, 42, 255, 170, 176, 101, 241, 117, 237, 186,
          174, 48, 251, 127, 80, 205, 244, 198, 59, 115, 79, 155, 117, 105, 243,
          81, 52, 198, 93>>,
        epoch: 1
      }
    },
    signature: <<160, 239, 71, 166, 221, 26, 125, 154, 178, 147, 27, 84, 155,
      49, 19, 26, 13, 81, 145, 153, 73, 234, 172, 203, 225, 95, 34, 82, 63, 180,
      209, 87, 236, 171, 104, 156, 103, 17, 102, 102, 222, 103, 98, 26, 130,
      119, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: ~c"\t",
    data: %SszTypes.AttestationData{
      slot: 8,
      index: 0,
      beacon_block_root: <<148, 161, 114, 87, 42, 255, 170, 176, 101, 241, 117,
        237, 186, 174, 48, 251, 127, 80, 205, 244, 198, 59, 115, 79, 155, 117,
        105, 243, 81, 52, 198, 93>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 1
      }
    },
    signature: <<171, 244, 116, 227, 204, 105, 151, 222, 250, 211, 250, 23, 125,
      175, 29, 118, 229, 114, 74, 166, 15, 233, 159, 226, 114, 10, 162, 92, 197,
      221, 166, 175, 251, 24, 14, 190, 237, 85, 89, 19, 216, 95, 129, 255, 109,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/proposer_index_slashed/post.ssz_snappy
post before deserializing BeaconState
✅ post
.............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_incorrect_sig_1/post.ssz_snappy
✅ post
..................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_source_epoch/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_source_epoch/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 25,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 2
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 3
    }
  },
  signature: <<184, 7, 220, 109, 232, 46, 23, 62, 115, 77, 33, 32, 227, 207, 14,
    227, 244, 179, 127, 101, 2, 248, 47, 152, 80, 80, 203, 124, 123, 177, 242,
    57, 219, 83, 166, 241, 106, 141, 73, 121, 223, 171, 243, 184, 50, 193, 13,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_old_source_epoch/post.ssz_snappy
✅ post
............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_surround/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_surround/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [2, 9, 25, 43],
    data: %SszTypes.AttestationData{
      slot: 8,
      index: 0,
      beacon_block_root: <<80, 58, 91, 94, 12, 165, 132, 143, 125, 6, 79, 157,
        21, 150, 25, 24, 11, 174, 125, 61, 108, 33, 205, 161, 232, 238, 70, 201,
        4, 255, 97, 179>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<80, 58, 91, 94, 12, 165, 132, 143, 125, 6, 79, 157, 21, 150, 25,
          24, 11, 174, 125, 61, 108, 33, 205, 161, 232, 238, 70, 201, 4, 255,
          97, 179>>,
        epoch: 2
      }
    },
    signature: <<161, 24, 24, 232, 33, 37, 193, 37, 1, 241, 157, 215, 71, 109,
      124, 112, 215, 123, 56, 29, 124, 11, 241, 72, 249, 219, 82, 13, 160, 180,
      23, 40, 4, 148, 149, 220, 66, 238, 198, 158, 9, 25, 70, 224, 218, 238,
      ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [2, 9, 25, 43],
    data: %SszTypes.AttestationData{
      slot: 8,
      index: 0,
      beacon_block_root: <<80, 58, 91, 94, 12, 165, 132, 143, 125, 6, 79, 157,
        21, 150, 25, 24, 11, 174, 125, 61, 108, 33, 205, 161, 232, 238, 70, 201,
        4, 255, 97, 179>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 1
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 1
      }
    },
    signature: <<178, 21, 194, 105, 40, 178, 14, 214, 118, 200, 159, 162, 137,
      212, 32, 223, 132, 42, 56, 99, 185, 169, 12, 177, 6, 215, 78, 30, 169, 40,
      194, 160, 204, 63, 185, 155, 60, 221, 241, 93, 4, 80, 119, 128, 160, ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/basic_surround/post.ssz_snappy
post before deserializing BeaconState
✅ post
...........................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_one_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_one_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/correct_attestation_included_at_one_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.......................................................................file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_parent_root/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_parent_root/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 1,
  proposer_index: 63,
  parent_root: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/invalid_parent_root/post.ssz_snappy
✅ post
.....................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_all_empty_indices/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_all_empty_indices/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_all_empty_indices/post.ssz_snappy
✅ post
.................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_correct_attestation_included_after_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_correct_attestation_included_after_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193, 156,
    233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194, 90, 119,
    89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206, 165, 86,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_correct_attestation_included_after_epoch_delay/post.ssz_snappy
✅ post
.......................................................................................................................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_attestation_signature/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_attestation_signature/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_attestation_signature/post.ssz_snappy
✅ post
.................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_1/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_1/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 30, 15, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_unsorted_att_1/post.ssz_snappy
✅ post
..............................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_high_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_high_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33, 64],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_high_index/post.ssz_snappy
✅ post
...............file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_mismatched_target_and_slot/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_mismatched_target_and_slot/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 8,
    index: 0,
    beacon_block_root: <<3, 52, 95, 228, 93, 119, 163, 151, 188, 53, 202, 59,
      142, 71, 133, 22, 47, 221, 151, 232, 168, 132, 208, 53, 7, 143, 25, 69,
      31, 109, 223, 27>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<3, 52, 95, 228, 93, 119, 163, 151, 188, 53, 202, 59, 142, 71, 133,
        22, 47, 221, 151, 232, 168, 132, 208, 53, 7, 143, 25, 69, 31, 109, 223,
        27>>,
      epoch: 2
    }
  },
  signature: <<179, 226, 142, 89, 139, 89, 175, 245, 148, 190, 117, 151, 138,
    165, 7, 201, 190, 54, 148, 227, 55, 200, 109, 98, 228, 71, 81, 141, 65, 84,
    24, 14, 50, 245, 202, 60, 100, 124, 91, 127, 28, 48, 225, 49, 227, 99, 137,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_mismatched_target_and_slot/post.ssz_snappy
✅ post
...............file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_empty_indices/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_empty_indices/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att2_empty_indices/post.ssz_snappy
✅ post
................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_seemingly_valid_sig/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_seemingly_valid_sig/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<16>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_empty_participants_seemingly_valid_sig/post.ssz_snappy
✅ post
........................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_participants_already_slashed/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_participants_already_slashed/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_participants_already_slashed/post.ssz_snappy
✅ post
......................................................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_previous_source_root/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_previous_source_root/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 33,
    index: 0,
    beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
      132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
      183, 236, 18, 174>>,
    source: %SszTypes.Checkpoint{
      root: "22222222222222222222222222222222",
      epoch: 3
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 4
    }
  },
  signature: <<131, 222, 215, 250, 13, 176, 180, 176, 97, 8, 102, 152, 106, 135,
    194, 141, 152, 208, 251, 89, 146, 27, 237, 169, 12, 50, 71, 246, 1, 95, 158,
    5, 42, 53, 194, 250, 68, 125, 88, 255, 24, 121, 207, 148, 7, 116, 44, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_previous_source_root/post.ssz_snappy
✅ post
..........................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      epoch: 0
    }
  },
  signature: <<131, 219, 207, 56, 2, 14, 226, 218, 219, 212, 38, 35, 173, 136,
    237, 54, 244, 172, 212, 20, 175, 172, 12, 99, 148, 138, 3, 105, 21, 83, 99,
    185, 81, 187, 162, 114, 165, 216, 124, 203, 181, 186, 112, 0, 74, 196, 79,
    ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_and_target_included_at_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.....................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_min_inclusion_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_min_inclusion_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<138, 178, 99, 20, 20, 253, 49, 193, 153, 93, 21, 184, 62, 86, 17,
    82, 139, 128, 247, 162, 115, 228, 228, 96, 2, 117, 56, 57, 91, 173, 149, 86,
    191, 183, 31, 218, 120, 126, 0, 145, 216, 144, 134, 99, 197, 166, 75, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_min_inclusion_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
.......................................................................................................................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/low_balances/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/low_balances/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<103, 140, 136, 63, 31, 213, 193, 145, 186, 2, 77,
        149, 167, 65, 252, 108, 160, 239, 177, 143, 8, 197, 218, 168, 146, 99,
        153, 161, 156, 203, 11, 53>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<103, 140, 136, 63, 31, 213, 193, 145, 186, 2, 77, 149, 167, 65,
          252, 108, 160, 239, 177, 143, 8, 197, 218, 168, 146, 99, 153, 161,
          156, 203, 11, 53>>,
        epoch: 0
      }
    },
    signature: <<172, 113, 226, 7, 126, 239, 15, 135, 135, 104, 84, 100, 81,
      221, 210, 248, 8, 24, 201, 203, 149, 241, 85, 188, 129, 195, 81, 117, 159,
      101, 229, 214, 141, 198, 72, 109, 211, 213, 18, 193, 31, 211, 77, 128,
      132, 132, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<103, 140, 136, 63, 31, 213, 193, 145, 186, 2, 77,
        149, 167, 65, 252, 108, 160, 239, 177, 143, 8, 197, 218, 168, 146, 99,
        153, 161, 156, 203, 11, 53>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<181, 229, 184, 62, 96, 74, 118, 110, 170, 184, 104, 24, 70,
      127, 218, 178, 85, 109, 106, 82, 123, 140, 212, 135, 179, 250, 184, 121,
      227, 23, 200, 56, 35, 202, 16, 159, 72, 232, 58, 114, 119, 211, 117, 122,
      181, ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/low_balances/post.ssz_snappy
post before deserializing BeaconState
✅ post
................................................................................................................file path: tests/minimal/capella/operations/block_header/pyspec_tests/basic_block_header/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/block_header/pyspec_tests/basic_block_header/block.ssz_snappy
block_header before deserializing Elixir.SszTypes.BeaconBlock
✅ operation
%SszTypes.BeaconBlock{
  slot: 1,
  proposer_index: 63,
  parent_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
    27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236, 18,
    174>>,
  state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
  body: %SszTypes.BeaconBlockBody{
    randao_reveal: <<137, 85, 125, 30, 107, 185, 57, 85, 62, 17, 39, 234, 210,
      192, 75, 131, 87, 222, 191, 229, 115, 179, 109, 50, 93, 38, 251, 60, 30,
      62, 217, 133, 176, 165, 243, 79, 128, 64, 90, 162, 189, 54, 45, 29, ...>>,
    eth1_data: %SszTypes.Eth1Data{
      deposit_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      deposit_count: 64,
      block_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>
    },
    graffiti: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
    proposer_slashings: [],
    attester_slashings: [],
    attestations: [],
    deposits: [],
    voluntary_exits: [],
    sync_aggregate: %SszTypes.SyncAggregate{
      sync_committee_bits: <<0, 0, 0, 0>>,
      sync_committee_signature: <<192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>
    },
    execution_payload: %SszTypes.ExecutionPayload{
      parent_hash: <<204, 210, 34, 97, 127, 219, 171, 7, 41, 82, 84, 107, 77,
        47, 243, 167, 129, 159, 178, 156, 44, 8, 194, 213, 60, 180, 93, 53, 194,
        17, 168, 42>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, ...>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, ...>>,
      block_number: 1,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<184, 253, 14, 10, 128, 224, 196, 91, 118, 129, 54, 11, 26,
        250, 150, 57, 48, 204, 247, 4, 37, 12, ...>>,
      transactions: [],
      withdrawals: []
    },
    bls_to_execution_changes: []
  }
}
file path: tests/minimal/capella/operations/block_header/pyspec_tests/basic_block_header/post.ssz_snappy
post before deserializing BeaconState
✅ post
..........file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_replaced_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_replaced_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 34],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_bad_replaced_index/post.ssz_snappy
✅ post
......................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<138, 178, 99, 20, 20, 253, 49, 193, 153, 93, 21, 184, 62, 86, 17,
    82, 139, 128, 247, 162, 115, 228, 228, 96, 2, 117, 56, 57, 91, 173, 149, 86,
    191, 183, 31, 218, 120, 126, 0, 145, 216, 144, 134, 99, 197, 166, 75, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/incorrect_head_included_at_epoch_delay/post.ssz_snappy
post before deserializing BeaconState
✅ post
....................................................................................file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_included_after_epoch_delay/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_included_after_epoch_delay/attestation.ssz_snappy
attestation before deserializing Elixir.SszTypes.Attestation
✅ operation
%SszTypes.Attestation{
  aggregation_bits: <<31>>,
  data: %SszTypes.AttestationData{
    slot: 0,
    index: 0,
    beacon_block_root: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    source: %SszTypes.Checkpoint{
      root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      epoch: 0
    },
    target: %SszTypes.Checkpoint{
      root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
        27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183, 236,
        18, 174>>,
      epoch: 0
    }
  },
  signature: <<138, 178, 99, 20, 20, 253, 49, 193, 153, 93, 21, 184, 62, 86, 17,
    82, 139, 128, 247, 162, 115, 228, 228, 96, 2, 117, 56, 57, 91, 173, 149, 86,
    191, 183, 31, 218, 120, 126, 0, 145, 216, 144, 134, 99, 197, 166, 75, ...>>
}
file path: tests/minimal/capella/operations/attestation/pyspec_tests/invalid_incorrect_head_included_after_epoch_delay/post.ssz_snappy
✅ post
...................................file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_high_index/pre.ssz_snappy
pre before deserializing BeaconState
✅ pre
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_high_index/attester_slashing.ssz_snappy
attester_slashing before deserializing Elixir.SszTypes.AttesterSlashing
✅ operation
%SszTypes.AttesterSlashing{
  attestation_1: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33, 64],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159, 132, 114,
          27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87, 183,
          236, 18, 174>>,
        epoch: 0
      }
    },
    signature: <<160, 109, 12, 191, 0, 166, 87, 216, 30, 21, 229, 90, 9, 193,
      156, 233, 86, 118, 159, 142, 19, 114, 180, 20, 108, 194, 219, 203, 194,
      90, 119, 89, 121, 105, 100, 12, 164, 47, 164, 179, 154, 172, 80, 49, 206,
      165, ...>>
  },
  attestation_2: %SszTypes.IndexedAttestation{
    attesting_indices: [6, 15, 30, 33],
    data: %SszTypes.AttestationData{
      slot: 0,
      index: 0,
      beacon_block_root: <<19, 231, 213, 129, 18, 84, 182, 147, 78, 55, 28, 159,
        132, 114, 27, 239, 237, 219, 16, 227, 51, 31, 248, 252, 59, 89, 51, 87,
        183, 236, 18, 174>>,
      source: %SszTypes.Checkpoint{
        root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
        epoch: 0
      },
      target: %SszTypes.Checkpoint{
        root: <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
        epoch: 0
      }
    },
    signature: <<143, 28, 47, 44, 37, 232, 211, 184, 172, 51, 107, 195, 249,
      224, 11, 121, 5, 218, 181, 157, 186, 124, 148, 199, 95, 80, 112, 109, 204,
      161, 227, 209, 167, 64, 5, 52, 160, 103, 83, 217, 100, 204, 214, 104, 57,
      ...>>
  }
}
file path: tests/minimal/capella/operations/attester_slashing/pyspec_tests/invalid_att1_high_index/post.ssz_snappy
✅ post
.................
Finished in 5.2 seconds (5.2s async, 0.00s sync)
1 doctest, 1 property, 8503 tests, 0 failures, 2525 excluded, 1907 skipped

Randomized with seed 235655

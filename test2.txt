
mix test --no-start --only implemented_spectest
Compiling 4 files (.ex)
Excluding tags: [:test]
Including tags: [:implemented_spectest]

*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************................................................................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "EEEEEEEEEEEE",
      base_fee_per_gas: 0,
      block_hash: <<100, 88, 251, 97, 238, 30, 250, 147, 210, 14, 48, 100, 145,
        34, 26, 38, 229, 178, 169, 92, 240, 228, 86, 121, 222, 186, 76, 59, 247,
        146, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..............................................................................................................................................................................................................................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<226, 231, 206, 189, 138, 244, 42, 145, 151, 99, 84, 32, 76,
        92, 120, 128, 108, 214, 204, 147, 39, 253, 87, 231, 139, 64, 20, 58,
        103, 60, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...............................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<195, 162, 54, 36, 68, 144, 208, 134, 205, 176, 180, 180,
        247, 77, 223, 221, 201, 141, 233, 227, 223, 148, 241, 161, 64, 65, 57,
        111, 3, 18, ...>>,
      transactions: [""],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.....................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<226, 231, 206, 189, 138, 244, 42, 145, 151, 99, 84, 32, 76,
        92, 120, 128, 108, 214, 204, 147, 39, 253, 87, 231, 139, 64, 20, 58,
        103, 60, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..........................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 0,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<78, 40, 26, 238, 23, 170, 95, 81, 160, 148, 216, 44, 52,
        247, 52, 143, 134, 139, 105, 47, 108, 41, 53, 183, 52, 56, 225, 108,
        223, 37, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.........................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 7,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<66, 244, 131, 140, 101, 255, 30, 248, 127, 121, 50, 198, 54,
        65, 52, 84, 213, 20, 87, 240, 243, 201, 87, 54, 132, 154, 8, 35, 145,
        138, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...............................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 12,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<123, 133, 122, 15, 13, 181, 247, 90, 125, 134, 97, 6, 214,
        19, 29, 56, 150, 68, 246, 26, 237, 148, 181, 28, 54, 226, 23, 103, 52,
        192, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
......................................................................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "EEEEEEEEEEEE",
      base_fee_per_gas: 1000000000,
      block_hash: <<120, 146, 39, 31, 81, 102, 113, 142, 101, 90, 222, 45, 203,
        106, 37, 22, 39, 84, 43, 187, 131, 7, 127, 136, 192, 240, 172, 12, 158,
        139, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
............................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<14, 144, 22, 53, 3, 30, 74, 67, 250, 173, 219, 181, 152,
        131, 184, 175, 15, 46, 226, 83>>,
      state_root: <<180, 176, 119, 58, 23, 40, 220, 204, 179, 155, 165, 144,
        244, 117, 173, 149, 93, 164, 124, 164, 187, 210, 41, 187, 41, 31, 201,
        131, 140, 151, 3, 59>>,
      receipts_root: <<253, 21, 136, 74, 212, 127, 189, 109, 6, 201, 116, 31,
        214, 254, 184, 225, 146, 74, 143, 57, 113, 138, 120, 88, 25, 19, 130,
        12, 195, 167, 97, 25>>,
      logs_bloom: <<146, 99, 136, 139, 136, 147, 218, 93, 101, 151, 204, 39,
        211, 250, 78, 153, 159, 202, 234, 71, 82, 74, 35, 43, 122, 240, 14, 49,
        80, 57, 254, 58, 21, 40, 67, 125, 129, 30, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 58965298284,
      gas_limit: 90804310649,
      gas_used: 77905576379,
      timestamp: 6,
      extra_data: <<200, 105, 250, 35, 110, 101, 108, 132, 60, 10, 104, 58, 48,
        97>>,
      base_fee_per_gas: 37899315703594024817808061941271014040384126541037138750353430445975459448557,
      block_hash: <<116, 228, 138, 131, 71, 44, 136, 83, 4, 75, 172, 4, 216,
        128, 146, 227, 181, 200, 140, 123, 42, 36, 84, 223, 58, 188, 29, 246,
        150, 223, ...>>,
      transactions: [
        <<84, 116, 165, 181, 162, 98, 6, 242, 88, 166, 25, 35, 203, 171, 108,
          66, 160, 95, 203, 84, 115, 122, 221, 20, 240, 242, 4, 206, ...>>,
        <<69, 14, 144, 241, 113, 15, 140, 34, 1, 144, 218, 115, 56, 178, 66,
          220, 216, 73, 42, 162, 2, 68, 230, 209, 182, 96, 3, ...>>,
        <<40, 160, 69, 100, 19, 181, 223, 223, 28, 225, 225, 79, 110, 34, 226,
          70, 128, 122, 56, 46, 133, 159, 21, 212, 158, 255, ...>>,
        <<251, 65, 191, 233, 210, 107, 151, 218, 235, 93, 136, 255, 71, 193,
          244, 217, 5, 179, 102, 187, 71, 37, 200, 176, 128, ...>>,
        <<28, 59, 4, 245, 19, 188, 62, 141, 118, 77, 22, 161, 244, 245, 148,
          175, 196, 254, 245, 122, 235, 222, 207, 19, ...>>,
        <<117, 75, 57, 47, 189, 129, 94, 176, 12, 254, 129, 71, 124, 31, 13, 70,
          97, 33, 166, 205, 198, 9, 204, ...>>,
        <<128, 201, 87, 194, 59, 25, 183, 1, 57, 175, 104, 141, 118, 116, 39, 6,
          193, 26, 15, 218, 121, 139, ...>>,
        <<16, 135, 37, 66, 19, 52, 205, 163, 247, 77, 74, 153, 123, 37, 218, 19,
          186, 35, 133, 57, 149, ...>>,
        <<109, 76, 151, 96, 140, 73, 6, 215, 209, 76, 76, 232, 249, 249, 165,
          107, 127, 35, 88, 145, ...>>,
        <<119, 179, 207, 123, 206, 95, 145, 183, 167, 40, 51, 173, 35, 131, 34,
          178, 136, 230, 98, ...>>,
        <<9, 69, 206, 86, 128, 229, 73, 191, 225, 101, 104, 250, 241, 38, 127,
          1, 111, 217, ...>>,
        <<214, 67, 37, 19, 156, 72, 132, 8, 15, 3, 119, 99, 51, 96, 182, 59, 97,
          ...>>
      ],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
....................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "EEEEEEEEEEEE",
      base_fee_per_gas: 0,
      block_hash: <<100, 88, 251, 97, 238, 30, 250, 147, 210, 14, 48, 100, 145,
        34, 26, 38, 229, 178, 169, 92, 240, 228, 86, 121, 222, 186, 76, 59, 247,
        146, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.......................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<98, 219, 133, 83, 5, 181, 43, 7, 202, 223, 148, 26, 85,
        97, 209, 234, 227, 51, 233, 180>>,
      state_root: <<40, 105, 112, 47, 101, 150, 187, 231, 62, 44, 211, 224, 245,
        183, 254, 163, 57, 132, 230, 225, 128, 56, 130, 169, 30, 178, 120, 217,
        189, 50, 43, 137>>,
      receipts_root: <<176, 104, 181, 230, 20, 94, 138, 75, 222, 9, 188, 236,
        99, 27, 96, 164, 238, 254, 8, 69, 184, 42, 191, 212, 3, 202, 84, 190,
        237, 149, 53, 27>>,
      logs_bloom: <<217, 151, 107, 5, 57, 30, 86, 105, 102, 119, 238, 75, 225,
        0, 68, 116, 231, 47, 4, 19, 199, 215, 102, 92, 125, 170, 40, 14, 86,
        110, 213, 241, 180, 57, 150, 201, 12, 140, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 53934920118,
      gas_limit: 80023706718,
      gas_used: 93999627265,
      timestamp: 6,
      extra_data: <<93, 2, 250, 185, 39, 128, 78, 118, 107, 169, 224, 84, 231,
        74, 193, 51, 77, 124, 140, 201, 116, 146, 20, 177, 123, 36>>,
      base_fee_per_gas: 70856819550056619410050129628008473774800169233370828335310853671918016273724,
      block_hash: <<163, 238, 20, 255, 173, 2, 165, 68, 72, 244, 134, 137, 3, 3,
        13, 46, 214, 78, 37, 217, 111, 40, 248, 136, 251, 29, 8, 201, 198, 31,
        ...>>,
      transactions: [
        <<196, 242, 182, 63, 73, 59, 144, 23, 199, 82, 66, 56, 163, 155, 32,
          140, 86, 138, 0, 216, 155, 32, 150, 125, 190, 38, 132, 245, ...>>,
        <<86, 153, 62, 173, 99, 122, 93, 71, 202, 182, 207, 232, 223, 110, 116,
          34, 174, 167, 127, 88, 167, 120, 69, 43, 14, 31, 189, ...>>,
        <<184, 152, 57, 159, 238, 218, 120, 64, 56, 113, 4, 99, 26, 188, 207,
          209, 96, 100, 92, 39, 132, 155, 125, 225, 139, 132, ...>>,
        <<227, 203, 110, 188, 37, 190, 24, 183, 214, 203, 166, 20, 194, 247,
          118, 41, 25, 198, 72, 188, 53, 80, 201, 172, 115, ...>>,
        <<225, 3, 236, 167, 173, 22, 142, 207, 100, 186, 229, 68, 177, 182, 12,
          142, 92, 181, 32, 48, 20, 189, 255, 123, ...>>,
        <<42, 118, 55, 104, 193, 205, 7, 215, 122, 39, 179, 53, 128, 50, 46, 3,
          238, 85, 234, 88, 64, 139, 154, ...>>,
        <<231, 60, 54, 196, 190, 114, 238, 226, 148, 132, 162, 177, 241, 190,
          58, 165, 96, 24, 77, 121, 46, 194, ...>>,
        <<1, 49, 212, 50, 56, 104, 213, 28, 55, 118, 233, 215, 115, 188, 216,
          98, 223, 45, 137, 37, 160, ...>>,
        <<2, 237, 81, 101, 216, 109, 40, 142, 20, 90, 124, 106, 78, 130, 34,
          130, 133, 141, 105, 219, ...>>,
        <<125, 194, 196, 93, 31, 78, 118, 230, 89, 175, 117, 62, 130, 190, 157,
          15, 85, 206, 40, ...>>,
        <<25, 9, 116, 27, 50, 36, 31, 16, 150, 57, 110, 41, 81, 4, 10, 207, 96,
          107, ...>>,
        <<183, 136, 183, 125, 34, 141, 25, 33, 37, 84, 125, 56, 3, 234, 243, 53,
          198, ...>>,
        <<9, 210, 134, 18, 56, 168, 27, 109, 150, 219, 197, 180, 141, 236, 110,
          148, ...>>,
        <<150, 252, 154, 190, 253, 148, 32, 151, 227, 153, 243, 161, 5, 145,
          130, ...>>,
        <<240, 175, 126, 114, 229, 222, 219, 91, 92, 218, 134, 176, 199, 98,
          ...>>,
        <<73, 104, 243, 78, 146, 150, 78, 96, 7, 164, 43, 46, 219, ...>>,
        <<76, 236, 152, 169, 166, 19, 78, 178, 61, 237, 42, 62, ...>>,
        <<9, 252, 248, 147, 197, 32, 101, 239, 97, 38, 221, ...>>,
        <<236, 161, 20, 140, 216, 93, 86, 24, 39, 14, ...>>,
        <<127, 137, 142, 255, 222, 183, 128, 200, 53, ...>>,
        <<232, 4, 133, 236, 234, 8, 166, 202, ...>>,
        <<214, 33, 141, 236, 110, 101, 165, ...>>,
        <<62, 64, 185, 251, 218, 101, ...>>,
        <<225, 253, 165, 251, 216, ...>>,
        <<95, 150, 216, 197, ...>>,
        <<68, 103, 183, ...>>,
        <<27, 107, ...>>,
        <<61, ...>>,
        <<...>>,
        ...
      ],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
........................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 255, 244, 153, 121, 75, 233, 137, 189, 8, 212, 142,
        197, 67, 53, 37, 139, 91, 244, 77>>,
      state_root: <<60, 202, 63, 60, 163, 13, 254, 157, 119, 63, 16, 108, 101,
        217, 45, 3, 139, 232, 96, 231, 252, 127, 169, 143, 26, 195, 65, 178, 96,
        48, 62, 64>>,
      receipts_root: <<229, 127, 4, 132, 75, 222, 129, 152, 93, 134, 37, 12,
        104, 44, 62, 152, 149, 129, 2, 205, 251, 120, 44, 150, 143, 152, 182,
        243, 38, 168, 8, 82>>,
      logs_bloom: <<40, 102, 226, 18, 68, 229, 52, 251, 90, 253, 64, 89, 197,
        228, 193, 55, 113, 232, 161, 104, 150, 89, 248, 184, 162, 31, 151, 40,
        204, 174, 227, 19, 83, 215, 156, 236, 74, 181, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 76812326139,
      gas_limit: 25683989416,
      gas_used: 9273961395,
      timestamp: 6,
      extra_data: <<85, 206, 188, 68, 229, 135, 79, 155, 102, 250, 168, 176, 52,
        144, 145, 6, 224, 44, 237, 244, 132, 229, 137, 183, 68, 223>>,
      base_fee_per_gas: 99597714263915078037529558850582041131126262893453892460013387361814366206596,
      block_hash: <<143, 147, 192, 226, 21, 231, 131, 108, 243, 140, 237, 239,
        151, 112, 189, 4, 177, 101, 12, 23, 57, 75, 21, 68, 237, 234, 249, 226,
        150, 217, ...>>,
      transactions: [
        <<140, 245, 246, 130, 189, 8, 17, 163, 108, 124, 144, 30, 171, 99, 160,
          181, 180, 55, 128, 100, 161, 253, 180, 180, 207, 88, 52, 64, ...>>,
        <<186, 184, 146, 4, 147, 51, 140, 189, 87, 27, 97, 73, 150, 19, 206, 23,
          60, 197, 190, 99, 48, 150, 101, 143, 21, 22, 161, ...>>,
        <<187, 4, 58, 33, 130, 134, 146, 48, 230, 227, 115, 104, 94, 13, 172,
          120, 169, 21, 153, 164, 103, 1, 143, 240, 105, 166, ...>>,
        <<208, 187, 126, 158, 192, 85, 51, 101, 76, 204, 97, 56, 18, 145, 26,
          58, 31, 206, 12, 214, 73, 214, 70, 231, 58, ...>>,
        <<111, 50, 140, 223, 145, 60, 113, 39, 107, 213, 236, 54, 118, 18, 24,
          233, 2, 77, 22, 78, 105, 125, 122, 63, ...>>,
        <<212, 32, 236, 36, 135, 177, 236, 202, 159, 135, 243, 53, 171, 27, 135,
          141, 137, 93, 32, 190, 181, 207, 252, ...>>,
        <<140, 215, 210, 20, 58, 35, 183, 80, 144, 58, 9, 72, 229, 201, 123,
          167, 238, 186, 168, 203, 164, 43, ...>>,
        <<83, 134, 166, 97, 69, 166, 159, 99, 192, 238, 157, 100, 125, 249, 91,
          97, 252, 81, 34, 25, 154, ...>>,
        <<61, 69, 126, 93, 122, 182, 202, 25, 229, 111, 131, 117, 77, 17, 75,
          186, 6, 156, 134, 39, ...>>,
        <<254, 184, 37, 132, 167, 188, 7, 154, 8, 163, 36, 210, 130, 211, 8, 91,
          22, 167, 95, ...>>,
        <<10, 232, 171, 105, 173, 1, 166, 63, 34, 154, 160, 134, 237, 169, 38,
          33, 119, 209, ...>>,
        <<255, 95, 29, 152, 203, 68, 24, 231, 103, 74, 253, 157, 125, 142, 113,
          182, 8, ...>>,
        <<126, 83, 145, 200, 116, 57, 202, 67, 100, 155, 49, 87, 255, 243, 136,
          40, ...>>,
        <<117, 24, 196, 206, 80, 190, 112, 254, 230, 169, 245, 221, 26, 19, 87,
          ...>>,
        <<65, 146, 218, 179, 224, 55, 234, 180, 177, 202, 11, 248, 53, 173,
          ...>>,
        <<246, 232, 18, 253, 32, 80, 18, 106, 119, 27, 86, 162, 122, ...>>,
        <<46, 3, 19, 72, 249, 13, 166, 235, 163, 255, 126, 56, ...>>,
        <<108, 106, 4, 16, 54, 26, 235, 131, 138, 154, 175, ...>>,
        <<216, 235, 114, 101, 64, 107, 232, 15, 59, 229, ...>>,
        <<169, 30, 233, 36, 225, 248, 58, 7, 87, ...>>,
        <<144, 195, 243, 113, 178, 10, 41, 185, ...>>,
        <<230, 189, 63, 254, 205, 97, 22, ...>>,
        <<150, 62, 51, 156, 133, 196, ...>>
      ],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...............................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "EEEEEEEEEEEE",
      base_fee_per_gas: 1000000000,
      block_hash: <<120, 146, 39, 31, 81, 102, 113, 142, 101, 90, 222, 45, 203,
        106, 37, 22, 39, 84, 43, 187, 131, 7, 127, 136, 192, 240, 172, 12, 158,
        139, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<195, 162, 54, 36, 68, 144, 208, 134, 205, 176, 180, 180,
        247, 77, 223, 221, 201, 141, 233, 227, 223, 148, 241, 161, 64, 65, 57,
        111, 3, 18, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..............................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<195, 162, 54, 36, 68, 144, 208, 134, 205, 176, 180, 180,
        247, 77, 223, 221, 201, 141, 233, 227, 223, 148, 241, 161, 64, 65, 57,
        111, 3, 18, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..............................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<123, 191, 128, 235, 147, 67, 99, 85, 26, 3, 136, 163, 216,
        210, 62, 123, 127, 235, 37, 188, 37, 218, 172, 156, 185, 228, 39, 237,
        185, 203, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..............................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 5,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<191, 153, 127, 55, 159, 200, 89, 254, 150, 224, 177, 245,
        147, 61, 1, 47, 201, 15, 149, 214, 65, 173, 58, 54, 116, 18, 44, 8, 194,
        246, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.....................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<226, 231, 206, 189, 138, 244, 42, 145, 151, 99, 84, 32, 76,
        92, 120, 128, 108, 214, 204, 147, 39, 253, 87, 231, 139, 64, 20, 58,
        103, 60, ...>>,
      transactions: [""],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.....................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 12,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<58, 249, 115, 57, 202, 12, 214, 122, 110, 80, 6, 172, 76,
        121, 37, 182, 14, 75, 245, 230, 3, 18, 120, 142, 153, 17, 198, 113, 14,
        42, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
......................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<12, 30, 227, 126, 97, 105, 75, 244, 139, 234, 89, 13,
        224, 103, 73, 59, 252, 235, 250, 155>>,
      state_root: <<159, 58, 16, 43, 183, 233, 142, 101, 243, 125, 41, 39, 251,
        130, 220, 25, 80, 154, 211, 122, 53, 186, 5, 124, 107, 96, 190, 159,
        232, 185, 143, 225>>,
      receipts_root: <<246, 229, 248, 58, 147, 85, 1, 98, 211, 230, 242, 201,
        209, 130, 10, 158, 26, 18, 153, 192, 201, 138, 97, 4, 80, 163, 143, 154,
        184, 181, 80, 242>>,
      logs_bloom: <<146, 153, 149, 88, 126, 192, 237, 38, 172, 213, 183, 228,
        195, 123, 191, 227, 138, 153, 45, 247, 141, 202, 131, 59, 255, 171, 87,
        43, 72, 246, 233, 6, 25, 191, 51, 124, 233, 139, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 23875428805,
      gas_limit: 67018045346,
      gas_used: 82531997700,
      timestamp: 6,
      extra_data: <<145, 28, 80, 140, 217, 30, 228, 88, 131, 162, 66, 204, 80,
        132, 10, 112, 84, 147, 210, 118, 61, 176, 233, 146, 141, 57, 252, 24,
        33, 231>>,
      base_fee_per_gas: 81130091083092002380258702564049636741871191667081828547841639869337949467898,
      block_hash: <<207, 83, 32, 130, 142, 232, 76, 130, 170, 123, 2, 138, 57,
        56, 131, 48, 239, 209, 152, 21, 215, 49, 99, 95, 219, 38, 36, 215, 169,
        142, ...>>,
      transactions: [
        <<102, 5, 213, 77, 196, 13, 191, 130, 43, 158, 133, 152, 95, 240, 124,
          212, 139, 241, 14, 137, 48, 27, 171, 247, 222, 58, 255, 95, ...>>,
        <<92, 227, 199, 109, 63, 248, 143, 181, 16, 193, 83, 171, 17, 51, 119,
          114, 175, 91, 91, 123, 217, 226, 164, 204, 241, 81, 174, ...>>,
        <<112, 70, 89, 247, 212, 122, 147, 0, 195, 234, 216, 39, 254, 163, 255,
          34, 234, 77, 168, 227, 218, 35, 27, 197, 131, 47, ...>>,
        <<90, 247, 152, 142, 255, 137, 17, 191, 70, 75, 4, 108, 0, 175, 159,
          136, 35, 29, 57, 145, 104, 241, 83, 19, 94, ...>>,
        <<243, 7, 54, 209, 212, 56, 243, 65, 76, 156, 174, 198, 124, 165, 191,
          144, 45, 73, 173, 242, 150, 80, 178, 18, ...>>,
        <<160, 65, 63, 84, 190, 114, 50, 165, 189, 54, 183, 202, 13, 63, 196,
          78, 169, 23, 30, 216, 187, 179, 189, ...>>,
        <<52, 116, 136, 193, 210, 196, 243, 207, 48, 79, 10, 56, 184, 163, 50,
          188, 238, 182, 230, 162, 31, 55, ...>>,
        <<168, 155, 159, 59, 129, 119, 3, 86, 1, 197, 15, 201, 91, 47, 185, 199,
          245, 146, 98, 189, 43, ...>>,
        <<126, 243, 232, 151, 171, 191, 88, 56, 144, 187, 157, 139, 149, 137,
          149, 52, 167, 229, 180, 54, ...>>,
        <<110, 206, 186, 135, 188, 160, 145, 151, 139, 60, 155, 60, 173, 68,
          180, 59, 63, 251, 169, ...>>,
        <<44, 148, 198, 180, 161, 9, 222, 244, 120, 182, 87, 243, 201, 33, 94,
          172, 102, 162, ...>>,
        <<129, 202, 104, 158, 221, 140, 70, 151, 140, 199, 112, 55, 223, 150,
          13, 171, 20, ...>>,
        <<124, 231, 223, 220, 155, 53, 109, 170, 180, 104, 41, 190, 205, 105,
          178, 236, ...>>,
        <<72, 62, 100, 108, 104, 177, 185, 15, 96, 73, 142, 95, 183, 145, 17,
          ...>>,
        <<227, 98, 32, 61, 61, 225, 168, 150, 213, 141, 87, 34, 146, 239, ...>>,
        <<230, 167, 241, 23, 193, 108, 225, 203, 76, 194, 69, 243, 89, ...>>,
        <<83, 44, 135, 44, 228, 246, 228, 116, 225, 199, 176, 206, ...>>,
        <<227, 255, 195, 181, 249, 26, 159, 151, 136, 232, 214, ...>>,
        <<106, 12, 133, 254, 108, 148, 246, 244, 175, 141, ...>>,
        <<169, 133, 60, 69, 209, 12, 83, 175, 56, ...>>,
        <<83, 200, 104, 109, 28, 44, 173, 29, ...>>,
        <<222, 138, 201, 251, 128, 80, 234, ...>>,
        <<179, 154, 104, 147, 180, 41, ...>>,
        <<203, 195, 152, 196, 181, ...>>,
        <<212, 251, 121, 87, ...>>,
        <<32, 97, 151, ...>>,
        <<142, 31, ...>>,
        <<57, ...>>,
        <<...>>,
        ...
      ],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.......{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 7,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<214, 153, 163, 137, 35, 211, 72, 30, 126, 239, 123, 181, 51,
        32, 126, 148, 67, 111, 58, 143, 93, 156, 53, 28, 237, 198, 146, 101,
        181, 139, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
.......................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 0,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<35, 250, 186, 188, 237, 220, 176, 109, 139, 126, 64, 114,
        33, 102, 182, 72, 247, 80, 26, 22, 109, 233, 126, 233, 173, 7, 72, 75,
        179, 71, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...............................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<58, 45, 126, 210, 115, 17, 43, 105, 47, 48, 199, 71, 24, 34,
        28, 254, 133, 209, 34, 254, 46, 63, 194, 232, 208, 117, 95, 84, 12, 106,
        ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<112, 67, 68, 255, 104, 105, 29, 145, 14, 15, 107, 13, 32,
        76, 154, 254, 158, 221, 150, 24, 56, 252, 93, 138, 170, 0, 185, 199, 42,
        118, 253, 189>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 5,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<149, 252, 153, 9, 106, 245, 61, 87, 238, 92, 8, 208, 5, 41,
        158, 110, 58, 12, 188, 159, 209, 34, 64, 231, 148, 67, 205, 157, 173,
        176, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
......................................................................................................................................................................................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU",
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 1,
      gas_limit: 0,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 0,
      block_hash: <<61, 121, 37, 114, 15, 174, 180, 143, 193, 76, 52, 237, 183,
        100, 118, 94, 7, 198, 252, 91, 173, 56, 35, 185, 69, 217, 153, 220, 73,
        168, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
..................................................................................................................................................{:error,
 {Tesla.Middleware.JSON, :encode,
  %Protocol.UndefinedError{
    protocol: Jason.Encoder,
    value: %SszTypes.ExecutionPayload{
      parent_hash: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>,
      fee_recipient: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0>>,
      state_root: "                                ",
      receipts_root: <<29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103,
        182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66,
        253, 64, 212, 147, 71>>,
      logs_bloom: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>,
      prev_randao: <<218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 218, 218, 218, 218>>,
      block_number: 2,
      gas_limit: 30000000,
      gas_used: 0,
      timestamp: 6,
      extra_data: "",
      base_fee_per_gas: 1000000000,
      block_hash: <<43, 3, 16, 120, 80, 92, 65, 104, 125, 189, 237, 59, 207, 35,
        215, 148, 73, 146, 99, 85, 110, 252, 22, 227, 48, 114, 137, 243, 211,
        155, ...>>,
      transactions: [],
      withdrawals: []
    },
    description: "Jason.Encoder protocol must always be explicitly implemented.\n\nIf you own the struct, you can derive the implementation specifying which fields should be encoded to JSON:\n\n    @derive {Jason.Encoder, only: [....]}\n    defstruct ...\n\nIt is also possible to encode all fields, although this should be used carefully to avoid accidentally leaking private information when new fields are added:\n\n    @derive Jason.Encoder\n    defstruct ...\n\nFinally, if you don't own the struct you want to encode to JSON, you may use Protocol.derive/3 placed outside of any module:\n\n    Protocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\n    Protocol.derive(Jason.Encoder, NameOfTheStruct)\n"
  }}}
...................................................................................................................................................................
Finished in 10.1 seconds (10.1s async, 0.00s sync)
1 property, 8503 tests, 0 failures, 2524 excluded, 1705 skipped

Randomized with seed 539340

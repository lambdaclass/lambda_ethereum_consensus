alias SszTypes.BeaconState
alias LambdaEthereumConsensus.StateTransition.Operations

# TODO: the state.ssz file should be randomly generated (with a seed)
{:ok, s} = File.read!("state.ssz") |> :snappyer.decompress()
{:ok, state} = Ssz.from_ssz(s, BeaconState)

att =
  %SszTypes.Attestation{
    aggregation_bits:
      <<1, 163, 120, 88, 46, 22, 68, 40, 247, 205, 52, 226, 114, 104, 255, 188, 207, 104, 68, 177,
        41, 233, 222, 105, 61, 230, 17, 161, 64, 172, 198, 144, 78, 87, 33, 65, 211, 90, 48, 201,
        222, 161, 79, 157, 65, 96, 160, 104, 7, 80, 159, 54, 65, 152, 9>>,
    data: %SszTypes.AttestationData{
      slot: 7_930_400,
      index: 39,
      beacon_block_root:
        <<208, 26, 79, 16, 119, 1, 14, 215, 35, 64, 210, 156, 179, 34, 245, 52, 179, 189, 145, 10,
          131, 46, 168, 29, 38, 201, 68, 71, 234, 224, 198, 76>>,
      source: %SszTypes.Checkpoint{
        root:
          <<54, 197, 250, 208, 219, 129, 195, 83, 97, 147, 49, 12, 24, 41, 109, 117, 22, 19, 163,
            41, 187, 163, 243, 100, 132, 92, 47, 196, 22, 165, 133, 104>>,
        epoch: 247_824
      },
      target: %SszTypes.Checkpoint{
        root:
          <<208, 26, 79, 16, 119, 1, 14, 215, 35, 64, 210, 156, 179, 34, 245, 52, 179, 189, 145,
            10, 131, 46, 168, 29, 38, 201, 68, 71, 234, 224, 198, 76>>,
        epoch: 247_825
      }
    },
    signature:
      <<142, 157, 148, 180, 190, 194, 58, 8, 63, 221, 22, 63, 14, 111, 40, 50, 191, 208, 185, 130,
        98, 239, 209, 157, 213, 154, 239, 60, 103, 64, 54, 13, 98, 85, 75, 16, 103, 229, 254, 247,
        186, 233, 12, 196, 178, 68, 55, 49, 0, 164, 80, 104, 57, 214, 133, 187, 240, 44, 68, 214,
        62, 221, 69, 79, 105, 67, 197, 127, 83, 196, 215, 126, 84, 188, 213, 22, 52, 153, 200,
        108, 153, 160, 43, 251, 199, 181, 2, 133, 92, 224, 32, 150, 116, 139, 88, 236>>
  }

Benchee.run(%{
  "process_attestation" => fn ->
    {:ok, _} = Operations.process_attestation(state, att)
  end
})

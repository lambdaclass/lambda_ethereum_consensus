// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: proto/libp2p.proto

package libp2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeToTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic to subscribe to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SubscribeToTopic) Reset() {
	*x = SubscribeToTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToTopic) ProtoMessage() {}

func (x *SubscribeToTopic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToTopic.ProtoReflect.Descriptor instead.
func (*SubscribeToTopic) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeToTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UnsubscribeFromTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic to subscribe to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnsubscribeFromTopic) Reset() {
	*x = UnsubscribeFromTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeFromTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeFromTopic) ProtoMessage() {}

func (x *UnsubscribeFromTopic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeFromTopic.ProtoReflect.Descriptor instead.
func (*UnsubscribeFromTopic) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{1}
}

func (x *UnsubscribeFromTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to C:
	//
	//	*Command_Subscribe
	//	*Command_Unsubscribe
	C isCommand_C `protobuf_oneof:"c"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Command) GetC() isCommand_C {
	if m != nil {
		return m.C
	}
	return nil
}

func (x *Command) GetSubscribe() *SubscribeToTopic {
	if x, ok := x.GetC().(*Command_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *Command) GetUnsubscribe() *UnsubscribeFromTopic {
	if x, ok := x.GetC().(*Command_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

type isCommand_C interface {
	isCommand_C()
}

type Command_Subscribe struct {
	Subscribe *SubscribeToTopic `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

type Command_Unsubscribe struct {
	Unsubscribe *UnsubscribeFromTopic `protobuf:"bytes,3,opt,name=unsubscribe,proto3,oneof"`
}

func (*Command_Subscribe) isCommand_C() {}

func (*Command_Unsubscribe) isCommand_C() {}

type GossipSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic from which the notification arrived.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Compressed and ssz encoded message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GossipSub) Reset() {
	*x = GossipSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipSub) ProtoMessage() {}

func (x *GossipSub) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipSub.ProtoReflect.Descriptor instead.
func (*GossipSub) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{3}
}

func (x *GossipSub) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GossipSub) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A response from a command.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to N:
	//
	//	*Notification_Gossip
	//	*Notification_Response
	N isNotification_N `protobuf_oneof:"n"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_libp2p_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_libp2p_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_proto_libp2p_proto_rawDescGZIP(), []int{5}
}

func (m *Notification) GetN() isNotification_N {
	if m != nil {
		return m.N
	}
	return nil
}

func (x *Notification) GetGossip() *GossipSub {
	if x, ok := x.GetN().(*Notification_Gossip); ok {
		return x.Gossip
	}
	return nil
}

func (x *Notification) GetResponse() *Response {
	if x, ok := x.GetN().(*Notification_Response); ok {
		return x.Response
	}
	return nil
}

type isNotification_N interface {
	isNotification_N()
}

type Notification_Gossip struct {
	Gossip *GossipSub `protobuf:"bytes,1,opt,name=gossip,proto3,oneof"`
}

type Notification_Response struct {
	Response *Response `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

func (*Notification_Gossip) isNotification_N() {}

func (*Notification_Response) isNotification_N() {}

var File_proto_libp2p_proto protoreflect.FileDescriptor

var file_proto_libp2p_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x26, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0b, 0x75,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x03, 0x0a, 0x01, 0x63, 0x22,
	0x3b, 0x0a, 0x09, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x0c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x53, 0x75, 0x62, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12,
	0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x0a, 0x01, 0x6e, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_libp2p_proto_rawDescOnce sync.Once
	file_proto_libp2p_proto_rawDescData = file_proto_libp2p_proto_rawDesc
)

func file_proto_libp2p_proto_rawDescGZIP() []byte {
	file_proto_libp2p_proto_rawDescOnce.Do(func() {
		file_proto_libp2p_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_libp2p_proto_rawDescData)
	})
	return file_proto_libp2p_proto_rawDescData
}

var file_proto_libp2p_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_libp2p_proto_goTypes = []interface{}{
	(*SubscribeToTopic)(nil),     // 0: libp2p_proto.SubscribeToTopic
	(*UnsubscribeFromTopic)(nil), // 1: libp2p_proto.UnsubscribeFromTopic
	(*Command)(nil),              // 2: libp2p_proto.Command
	(*GossipSub)(nil),            // 3: libp2p_proto.GossipSub
	(*Response)(nil),             // 4: libp2p_proto.Response
	(*Notification)(nil),         // 5: libp2p_proto.Notification
}
var file_proto_libp2p_proto_depIdxs = []int32{
	0, // 0: libp2p_proto.Command.subscribe:type_name -> libp2p_proto.SubscribeToTopic
	1, // 1: libp2p_proto.Command.unsubscribe:type_name -> libp2p_proto.UnsubscribeFromTopic
	3, // 2: libp2p_proto.Notification.gossip:type_name -> libp2p_proto.GossipSub
	4, // 3: libp2p_proto.Notification.response:type_name -> libp2p_proto.Response
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_libp2p_proto_init() }
func file_proto_libp2p_proto_init() {
	if File_proto_libp2p_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_libp2p_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_libp2p_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeFromTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_libp2p_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_libp2p_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_libp2p_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_libp2p_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_libp2p_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Command_Subscribe)(nil),
		(*Command_Unsubscribe)(nil),
	}
	file_proto_libp2p_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Notification_Gossip)(nil),
		(*Notification_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_libp2p_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_libp2p_proto_goTypes,
		DependencyIndexes: file_proto_libp2p_proto_depIdxs,
		MessageInfos:      file_proto_libp2p_proto_msgTypes,
	}.Build()
	File_proto_libp2p_proto = out.File
	file_proto_libp2p_proto_rawDesc = nil
	file_proto_libp2p_proto_goTypes = nil
	file_proto_libp2p_proto_depIdxs = nil
}
